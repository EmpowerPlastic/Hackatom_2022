// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: plasticcredits/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bf7985afac762d, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bf7985afac762d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetIssuerRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *QueryGetIssuerRequest) Reset()         { *m = QueryGetIssuerRequest{} }
func (m *QueryGetIssuerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIssuerRequest) ProtoMessage()    {}
func (*QueryGetIssuerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bf7985afac762d, []int{2}
}
func (m *QueryGetIssuerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIssuerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIssuerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIssuerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIssuerRequest.Merge(m, src)
}
func (m *QueryGetIssuerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIssuerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIssuerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIssuerRequest proto.InternalMessageInfo

func (m *QueryGetIssuerRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type QueryGetIssuerResponse struct {
	Issuer Issuer `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer"`
}

func (m *QueryGetIssuerResponse) Reset()         { *m = QueryGetIssuerResponse{} }
func (m *QueryGetIssuerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIssuerResponse) ProtoMessage()    {}
func (*QueryGetIssuerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bf7985afac762d, []int{3}
}
func (m *QueryGetIssuerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIssuerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIssuerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIssuerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIssuerResponse.Merge(m, src)
}
func (m *QueryGetIssuerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIssuerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIssuerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIssuerResponse proto.InternalMessageInfo

func (m *QueryGetIssuerResponse) GetIssuer() Issuer {
	if m != nil {
		return m.Issuer
	}
	return Issuer{}
}

type QueryAllIssuerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIssuerRequest) Reset()         { *m = QueryAllIssuerRequest{} }
func (m *QueryAllIssuerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllIssuerRequest) ProtoMessage()    {}
func (*QueryAllIssuerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bf7985afac762d, []int{4}
}
func (m *QueryAllIssuerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIssuerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIssuerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIssuerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIssuerRequest.Merge(m, src)
}
func (m *QueryAllIssuerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIssuerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIssuerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIssuerRequest proto.InternalMessageInfo

func (m *QueryAllIssuerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllIssuerResponse struct {
	Issuer     []Issuer            `protobuf:"bytes,1,rep,name=issuer,proto3" json:"issuer"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIssuerResponse) Reset()         { *m = QueryAllIssuerResponse{} }
func (m *QueryAllIssuerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllIssuerResponse) ProtoMessage()    {}
func (*QueryAllIssuerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bf7985afac762d, []int{5}
}
func (m *QueryAllIssuerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIssuerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIssuerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIssuerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIssuerResponse.Merge(m, src)
}
func (m *QueryAllIssuerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIssuerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIssuerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIssuerResponse proto.InternalMessageInfo

func (m *QueryAllIssuerResponse) GetIssuer() []Issuer {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (m *QueryAllIssuerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetApprovedCollectorRequest struct {
	Addr   string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Issuer string `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (m *QueryGetApprovedCollectorRequest) Reset()         { *m = QueryGetApprovedCollectorRequest{} }
func (m *QueryGetApprovedCollectorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovedCollectorRequest) ProtoMessage()    {}
func (*QueryGetApprovedCollectorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bf7985afac762d, []int{6}
}
func (m *QueryGetApprovedCollectorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovedCollectorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovedCollectorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovedCollectorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovedCollectorRequest.Merge(m, src)
}
func (m *QueryGetApprovedCollectorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovedCollectorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovedCollectorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovedCollectorRequest proto.InternalMessageInfo

func (m *QueryGetApprovedCollectorRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *QueryGetApprovedCollectorRequest) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

type QueryGetApprovedCollectorResponse struct {
	ApprovedCollector ApprovedCollector `protobuf:"bytes,1,opt,name=approvedCollector,proto3" json:"approvedCollector"`
}

func (m *QueryGetApprovedCollectorResponse) Reset()         { *m = QueryGetApprovedCollectorResponse{} }
func (m *QueryGetApprovedCollectorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovedCollectorResponse) ProtoMessage()    {}
func (*QueryGetApprovedCollectorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bf7985afac762d, []int{7}
}
func (m *QueryGetApprovedCollectorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovedCollectorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovedCollectorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovedCollectorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovedCollectorResponse.Merge(m, src)
}
func (m *QueryGetApprovedCollectorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovedCollectorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovedCollectorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovedCollectorResponse proto.InternalMessageInfo

func (m *QueryGetApprovedCollectorResponse) GetApprovedCollector() ApprovedCollector {
	if m != nil {
		return m.ApprovedCollector
	}
	return ApprovedCollector{}
}

type QueryAllApprovedCollectorRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllApprovedCollectorRequest) Reset()         { *m = QueryAllApprovedCollectorRequest{} }
func (m *QueryAllApprovedCollectorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllApprovedCollectorRequest) ProtoMessage()    {}
func (*QueryAllApprovedCollectorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bf7985afac762d, []int{8}
}
func (m *QueryAllApprovedCollectorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllApprovedCollectorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllApprovedCollectorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllApprovedCollectorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllApprovedCollectorRequest.Merge(m, src)
}
func (m *QueryAllApprovedCollectorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllApprovedCollectorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllApprovedCollectorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllApprovedCollectorRequest proto.InternalMessageInfo

func (m *QueryAllApprovedCollectorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllApprovedCollectorResponse struct {
	ApprovedCollector []ApprovedCollector `protobuf:"bytes,1,rep,name=approvedCollector,proto3" json:"approvedCollector"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllApprovedCollectorResponse) Reset()         { *m = QueryAllApprovedCollectorResponse{} }
func (m *QueryAllApprovedCollectorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllApprovedCollectorResponse) ProtoMessage()    {}
func (*QueryAllApprovedCollectorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bf7985afac762d, []int{9}
}
func (m *QueryAllApprovedCollectorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllApprovedCollectorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllApprovedCollectorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllApprovedCollectorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllApprovedCollectorResponse.Merge(m, src)
}
func (m *QueryAllApprovedCollectorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllApprovedCollectorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllApprovedCollectorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllApprovedCollectorResponse proto.InternalMessageInfo

func (m *QueryAllApprovedCollectorResponse) GetApprovedCollector() []ApprovedCollector {
	if m != nil {
		return m.ApprovedCollector
	}
	return nil
}

func (m *QueryAllApprovedCollectorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCreditRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetCreditRequest) Reset()         { *m = QueryGetCreditRequest{} }
func (m *QueryGetCreditRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCreditRequest) ProtoMessage()    {}
func (*QueryGetCreditRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bf7985afac762d, []int{10}
}
func (m *QueryGetCreditRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCreditRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCreditRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCreditRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCreditRequest.Merge(m, src)
}
func (m *QueryGetCreditRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCreditRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCreditRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCreditRequest proto.InternalMessageInfo

func (m *QueryGetCreditRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetCreditResponse struct {
	Credit Credit `protobuf:"bytes,1,opt,name=credit,proto3" json:"credit"`
}

func (m *QueryGetCreditResponse) Reset()         { *m = QueryGetCreditResponse{} }
func (m *QueryGetCreditResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCreditResponse) ProtoMessage()    {}
func (*QueryGetCreditResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bf7985afac762d, []int{11}
}
func (m *QueryGetCreditResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCreditResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCreditResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCreditResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCreditResponse.Merge(m, src)
}
func (m *QueryGetCreditResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCreditResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCreditResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCreditResponse proto.InternalMessageInfo

func (m *QueryGetCreditResponse) GetCredit() Credit {
	if m != nil {
		return m.Credit
	}
	return Credit{}
}

type QueryAllCreditRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCreditRequest) Reset()         { *m = QueryAllCreditRequest{} }
func (m *QueryAllCreditRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCreditRequest) ProtoMessage()    {}
func (*QueryAllCreditRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bf7985afac762d, []int{12}
}
func (m *QueryAllCreditRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCreditRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCreditRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCreditRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCreditRequest.Merge(m, src)
}
func (m *QueryAllCreditRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCreditRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCreditRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCreditRequest proto.InternalMessageInfo

func (m *QueryAllCreditRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCreditResponse struct {
	Credit     []Credit            `protobuf:"bytes,1,rep,name=credit,proto3" json:"credit"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCreditResponse) Reset()         { *m = QueryAllCreditResponse{} }
func (m *QueryAllCreditResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCreditResponse) ProtoMessage()    {}
func (*QueryAllCreditResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bf7985afac762d, []int{13}
}
func (m *QueryAllCreditResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCreditResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCreditResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCreditResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCreditResponse.Merge(m, src)
}
func (m *QueryAllCreditResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCreditResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCreditResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCreditResponse proto.InternalMessageInfo

func (m *QueryAllCreditResponse) GetCredit() []Credit {
	if m != nil {
		return m.Credit
	}
	return nil
}

func (m *QueryAllCreditResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryIsApprovedRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *QueryIsApprovedRequest) Reset()         { *m = QueryIsApprovedRequest{} }
func (m *QueryIsApprovedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsApprovedRequest) ProtoMessage()    {}
func (*QueryIsApprovedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bf7985afac762d, []int{14}
}
func (m *QueryIsApprovedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsApprovedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsApprovedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsApprovedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsApprovedRequest.Merge(m, src)
}
func (m *QueryIsApprovedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsApprovedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsApprovedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsApprovedRequest proto.InternalMessageInfo

func (m *QueryIsApprovedRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type QueryIsApprovedResponse struct {
	Approved string `protobuf:"bytes,1,opt,name=approved,proto3" json:"approved,omitempty"`
}

func (m *QueryIsApprovedResponse) Reset()         { *m = QueryIsApprovedResponse{} }
func (m *QueryIsApprovedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsApprovedResponse) ProtoMessage()    {}
func (*QueryIsApprovedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bf7985afac762d, []int{15}
}
func (m *QueryIsApprovedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsApprovedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsApprovedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsApprovedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsApprovedResponse.Merge(m, src)
}
func (m *QueryIsApprovedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsApprovedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsApprovedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsApprovedResponse proto.InternalMessageInfo

func (m *QueryIsApprovedResponse) GetApproved() string {
	if m != nil {
		return m.Approved
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "plasticcreditledger.plasticcredits.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "plasticcreditledger.plasticcredits.QueryParamsResponse")
	proto.RegisterType((*QueryGetIssuerRequest)(nil), "plasticcreditledger.plasticcredits.QueryGetIssuerRequest")
	proto.RegisterType((*QueryGetIssuerResponse)(nil), "plasticcreditledger.plasticcredits.QueryGetIssuerResponse")
	proto.RegisterType((*QueryAllIssuerRequest)(nil), "plasticcreditledger.plasticcredits.QueryAllIssuerRequest")
	proto.RegisterType((*QueryAllIssuerResponse)(nil), "plasticcreditledger.plasticcredits.QueryAllIssuerResponse")
	proto.RegisterType((*QueryGetApprovedCollectorRequest)(nil), "plasticcreditledger.plasticcredits.QueryGetApprovedCollectorRequest")
	proto.RegisterType((*QueryGetApprovedCollectorResponse)(nil), "plasticcreditledger.plasticcredits.QueryGetApprovedCollectorResponse")
	proto.RegisterType((*QueryAllApprovedCollectorRequest)(nil), "plasticcreditledger.plasticcredits.QueryAllApprovedCollectorRequest")
	proto.RegisterType((*QueryAllApprovedCollectorResponse)(nil), "plasticcreditledger.plasticcredits.QueryAllApprovedCollectorResponse")
	proto.RegisterType((*QueryGetCreditRequest)(nil), "plasticcreditledger.plasticcredits.QueryGetCreditRequest")
	proto.RegisterType((*QueryGetCreditResponse)(nil), "plasticcreditledger.plasticcredits.QueryGetCreditResponse")
	proto.RegisterType((*QueryAllCreditRequest)(nil), "plasticcreditledger.plasticcredits.QueryAllCreditRequest")
	proto.RegisterType((*QueryAllCreditResponse)(nil), "plasticcreditledger.plasticcredits.QueryAllCreditResponse")
	proto.RegisterType((*QueryIsApprovedRequest)(nil), "plasticcreditledger.plasticcredits.QueryIsApprovedRequest")
	proto.RegisterType((*QueryIsApprovedResponse)(nil), "plasticcreditledger.plasticcredits.QueryIsApprovedResponse")
}

func init() { proto.RegisterFile("plasticcredits/query.proto", fileDescriptor_83bf7985afac762d) }

var fileDescriptor_83bf7985afac762d = []byte{
	// 798 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4d, 0x4f, 0x13, 0x4d,
	0x1c, 0xef, 0xf0, 0xd2, 0x3c, 0xcc, 0xf3, 0x5c, 0x98, 0xa7, 0xa2, 0x59, 0x4d, 0xc5, 0x3d, 0x88,
	0xa9, 0xb8, 0x1b, 0x8a, 0xa0, 0x60, 0x62, 0x52, 0x40, 0x5e, 0x2e, 0x04, 0x7b, 0xf4, 0xd2, 0x4c,
	0xdb, 0xc9, 0x66, 0xcd, 0xd2, 0x59, 0x76, 0x16, 0x02, 0x21, 0x5c, 0xfc, 0x00, 0xc6, 0xc4, 0x8f,
	0x61, 0xbc, 0x7a, 0xd0, 0x33, 0x09, 0x47, 0x12, 0x0f, 0x7a, 0x32, 0x86, 0xfa, 0x01, 0xfc, 0x08,
	0xa6, 0xf3, 0x9f, 0xa5, 0xdd, 0xdd, 0xb6, 0xec, 0x96, 0x7a, 0xea, 0xee, 0xfe, 0xdf, 0x7e, 0xbf,
	0xff, 0x2b, 0x60, 0xcd, 0x75, 0xa8, 0xf0, 0xed, 0x5a, 0xcd, 0x63, 0x75, 0xdb, 0x17, 0xe6, 0xde,
	0x3e, 0xf3, 0x8e, 0x0c, 0xd7, 0xe3, 0x3e, 0x27, 0x7a, 0x48, 0xe6, 0xb0, 0xba, 0xc5, 0x3c, 0x23,
	0xac, 0xaf, 0xe5, 0x2c, 0x6e, 0x71, 0xa9, 0x6e, 0xb6, 0x9e, 0xc0, 0x52, 0xbb, 0x63, 0x71, 0x6e,
	0x39, 0xcc, 0xa4, 0xae, 0x6d, 0xd2, 0x46, 0x83, 0xfb, 0xd4, 0xb7, 0x79, 0x43, 0x28, 0x69, 0xa1,
	0xc6, 0xc5, 0x2e, 0x17, 0x66, 0x95, 0x0a, 0x06, 0x01, 0xcd, 0x83, 0xb9, 0x2a, 0xf3, 0xe9, 0x9c,
	0xe9, 0x52, 0xcb, 0x6e, 0x48, 0x65, 0xa5, 0x7b, 0x3b, 0x82, 0xcf, 0xa5, 0x1e, 0xdd, 0x15, 0x3d,
	0x84, 0xb6, 0x10, 0xfb, 0x2d, 0x88, 0x52, 0x38, 0x13, 0x11, 0x52, 0xd7, 0xf5, 0xf8, 0x01, 0xab,
	0x57, 0x6a, 0xdc, 0x71, 0x58, 0xcd, 0xe7, 0x5e, 0x0f, 0x2f, 0xf0, 0x0b, 0x42, 0x3d, 0x87, 0xc9,
	0xcb, 0x16, 0xc2, 0x1d, 0x19, 0xb7, 0xcc, 0xf6, 0xf6, 0x99, 0xf0, 0xf5, 0x0a, 0xfe, 0x3f, 0xf4,
	0x55, 0xb8, 0xbc, 0x21, 0x18, 0xd9, 0xc4, 0x59, 0xc0, 0x77, 0x0b, 0x4d, 0xa3, 0x07, 0xff, 0x16,
	0x0b, 0xc6, 0xd5, 0x19, 0x34, 0xc0, 0xc7, 0xca, 0xd8, 0xd9, 0x8f, 0xbb, 0x99, 0xb2, 0xb2, 0xd7,
	0x1f, 0xe2, 0x1b, 0x32, 0xc0, 0x06, 0xf3, 0xb7, 0x24, 0x29, 0x15, 0x99, 0x10, 0x3c, 0x46, 0xeb,
	0x75, 0x4f, 0x06, 0x98, 0x28, 0xcb, 0x67, 0xbd, 0x8a, 0xa7, 0xa2, 0xca, 0x6d, 0x40, 0x90, 0x93,
	0x34, 0x80, 0xc0, 0x47, 0x00, 0x08, 0xec, 0xf5, 0x8a, 0x02, 0x54, 0x72, 0x9c, 0x30, 0xa0, 0x75,
	0x8c, 0xdb, 0x45, 0x53, 0x61, 0xee, 0x1b, 0x50, 0x61, 0xa3, 0x55, 0x61, 0x03, 0x5a, 0x4a, 0x55,
	0xd8, 0xd8, 0xa1, 0x16, 0x53, 0xb6, 0xe5, 0x0e, 0x4b, 0xfd, 0x03, 0x52, 0x2c, 0x3a, 0x22, 0x74,
	0x61, 0x31, 0x7a, 0x1d, 0x16, 0x64, 0x23, 0x04, 0x76, 0x44, 0x82, 0x9d, 0xb9, 0x12, 0x2c, 0xc0,
	0x08, 0xa1, 0xdd, 0xc6, 0xd3, 0x41, 0xca, 0x4b, 0xaa, 0xaf, 0x56, 0x83, 0xb6, 0xea, 0x53, 0x2a,
	0x32, 0x75, 0x49, 0x65, 0x44, 0x7e, 0x0d, 0xd2, 0xfb, 0x16, 0xe1, 0x7b, 0x7d, 0x1c, 0xaa, 0x44,
	0xd8, 0x78, 0x92, 0x46, 0x85, 0x2a, 0xe5, 0x0b, 0x49, 0x72, 0x12, 0xf3, 0xac, 0xd2, 0x13, 0xf7,
	0xaa, 0xbf, 0x56, 0x04, 0x4b, 0x8e, 0xd3, 0x93, 0xe0, 0xb0, 0x4a, 0xff, 0x2d, 0x20, 0xdf, 0x3d,
	0x58, 0x7f, 0xf2, 0xa3, 0xc3, 0x27, 0x3f, 0xbc, 0x36, 0x79, 0xd4, 0x1e, 0xe3, 0x55, 0x09, 0x23,
	0x48, 0x5d, 0x0e, 0x8f, 0xdb, 0x8d, 0x3a, 0x3b, 0x54, 0xcd, 0x01, 0x2f, 0x9d, 0x83, 0x1c, 0xa8,
	0xb7, 0x47, 0x00, 0x78, 0xa4, 0x19, 0x64, 0xf0, 0x11, 0x8c, 0x00, 0x7c, 0xed, 0x1c, 0xe4, 0x30,
	0xa4, 0xbf, 0x31, 0xc8, 0x7d, 0x58, 0x8c, 0x5e, 0x87, 0xc5, 0xf0, 0x2a, 0x34, 0xab, 0xc0, 0x6e,
	0x89, 0xa0, 0x3f, 0xfa, 0x6d, 0xda, 0x05, 0x7c, 0x33, 0xa6, 0xad, 0xb8, 0x69, 0xf8, 0x9f, 0xa0,
	0x91, 0x94, 0xc9, 0xe5, 0x7b, 0xf1, 0xf4, 0x3f, 0x3c, 0x2e, 0xed, 0xc8, 0x47, 0x84, 0xb3, 0xb0,
	0xf0, 0xc9, 0x62, 0x12, 0xf2, 0xf1, 0xdb, 0xa3, 0x3d, 0x49, 0x6d, 0x07, 0x08, 0xf5, 0xe2, 0x9b,
	0xaf, 0xbf, 0xde, 0x8f, 0xcc, 0x92, 0x82, 0xd9, 0xc5, 0x81, 0xd9, 0xf5, 0xce, 0x92, 0xcf, 0x08,
	0x67, 0x61, 0x93, 0x92, 0xa5, 0xc4, 0x71, 0xa3, 0x47, 0x4b, 0x5b, 0x1e, 0xc4, 0x54, 0xa1, 0x5e,
	0x92, 0xa8, 0xe7, 0xc9, 0x5c, 0x12, 0xd4, 0xb0, 0x4d, 0xcd, 0xe3, 0x56, 0xb1, 0x4e, 0xc8, 0x27,
	0x84, 0x27, 0xc0, 0x5b, 0xc9, 0x71, 0x52, 0xe0, 0x8f, 0xde, 0xb8, 0x14, 0xf8, 0x63, 0xc7, 0x2b,
	0x5d, 0xd6, 0xd5, 0x99, 0xfa, 0x8d, 0xf0, 0x64, 0x6c, 0x5d, 0x91, 0xb5, 0x34, 0x59, 0xec, 0xb5,
	0xb4, 0xb5, 0x17, 0xd7, 0xf4, 0xa2, 0x68, 0x6d, 0x4b, 0x5a, 0x9b, 0x64, 0x3d, 0x09, 0xad, 0xf8,
	0x9f, 0x5e, 0xaa, 0x44, 0xe6, 0x31, 0x30, 0x3e, 0x21, 0x4d, 0x84, 0x73, 0xb1, 0x68, 0xad, 0xb2,
	0xad, 0xa5, 0xc9, 0xfd, 0x10, 0x58, 0xf7, 0xbb, 0x41, 0xfa, 0x73, 0xc9, 0xfa, 0x29, 0x59, 0x1c,
	0x8c, 0x35, 0xf9, 0x82, 0x70, 0x16, 0xf6, 0x59, 0xba, 0x71, 0x0a, 0x6d, 0xea, 0x74, 0xe3, 0x14,
	0x5e, 0xc1, 0xfa, 0xb2, 0x64, 0xf0, 0x98, 0x14, 0x93, 0x30, 0x80, 0x5f, 0xf3, 0x58, 0x5e, 0x27,
	0x98, 0x27, 0x70, 0x97, 0x7a, 0x9e, 0x06, 0x25, 0x10, 0xbb, 0x21, 0xe9, 0xe6, 0x49, 0x5d, 0x8b,
	0x53, 0x84, 0x71, 0x7b, 0x65, 0x93, 0xe4, 0xe1, 0x63, 0x57, 0x41, 0x7b, 0x36, 0x90, 0xed, 0x20,
	0xed, 0x63, 0x8b, 0x4a, 0xd0, 0x41, 0x6a, 0x5a, 0x56, 0xd6, 0xce, 0x2e, 0xf2, 0xe8, 0xfc, 0x22,
	0x8f, 0x7e, 0x5e, 0xe4, 0xd1, 0xbb, 0x66, 0x3e, 0x73, 0xde, 0xcc, 0x67, 0xbe, 0x37, 0xf3, 0x99,
	0x57, 0x85, 0x6e, 0x0e, 0x0f, 0xa3, 0x2e, 0xfd, 0x23, 0x97, 0x89, 0x6a, 0x56, 0xfe, 0x67, 0x33,
	0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x3b, 0xff, 0x63, 0xfb, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Issuer by index.
	Issuer(ctx context.Context, in *QueryGetIssuerRequest, opts ...grpc.CallOption) (*QueryGetIssuerResponse, error)
	// Queries a list of Issuer items.
	IssuerAll(ctx context.Context, in *QueryAllIssuerRequest, opts ...grpc.CallOption) (*QueryAllIssuerResponse, error)
	// Queries a ApprovedCollector by index.
	ApprovedCollector(ctx context.Context, in *QueryGetApprovedCollectorRequest, opts ...grpc.CallOption) (*QueryGetApprovedCollectorResponse, error)
	// Queries a list of ApprovedCollector items.
	ApprovedCollectorAll(ctx context.Context, in *QueryAllApprovedCollectorRequest, opts ...grpc.CallOption) (*QueryAllApprovedCollectorResponse, error)
	// Queries a Credit by index.
	Credit(ctx context.Context, in *QueryGetCreditRequest, opts ...grpc.CallOption) (*QueryGetCreditResponse, error)
	// Queries a list of Credit items.
	CreditAll(ctx context.Context, in *QueryAllCreditRequest, opts ...grpc.CallOption) (*QueryAllCreditResponse, error)
	// Queries a list of IsApproved items.
	IsApproved(ctx context.Context, in *QueryIsApprovedRequest, opts ...grpc.CallOption) (*QueryIsApprovedResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/plasticcreditledger.plasticcredits.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Issuer(ctx context.Context, in *QueryGetIssuerRequest, opts ...grpc.CallOption) (*QueryGetIssuerResponse, error) {
	out := new(QueryGetIssuerResponse)
	err := c.cc.Invoke(ctx, "/plasticcreditledger.plasticcredits.Query/Issuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IssuerAll(ctx context.Context, in *QueryAllIssuerRequest, opts ...grpc.CallOption) (*QueryAllIssuerResponse, error) {
	out := new(QueryAllIssuerResponse)
	err := c.cc.Invoke(ctx, "/plasticcreditledger.plasticcredits.Query/IssuerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ApprovedCollector(ctx context.Context, in *QueryGetApprovedCollectorRequest, opts ...grpc.CallOption) (*QueryGetApprovedCollectorResponse, error) {
	out := new(QueryGetApprovedCollectorResponse)
	err := c.cc.Invoke(ctx, "/plasticcreditledger.plasticcredits.Query/ApprovedCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ApprovedCollectorAll(ctx context.Context, in *QueryAllApprovedCollectorRequest, opts ...grpc.CallOption) (*QueryAllApprovedCollectorResponse, error) {
	out := new(QueryAllApprovedCollectorResponse)
	err := c.cc.Invoke(ctx, "/plasticcreditledger.plasticcredits.Query/ApprovedCollectorAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Credit(ctx context.Context, in *QueryGetCreditRequest, opts ...grpc.CallOption) (*QueryGetCreditResponse, error) {
	out := new(QueryGetCreditResponse)
	err := c.cc.Invoke(ctx, "/plasticcreditledger.plasticcredits.Query/Credit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreditAll(ctx context.Context, in *QueryAllCreditRequest, opts ...grpc.CallOption) (*QueryAllCreditResponse, error) {
	out := new(QueryAllCreditResponse)
	err := c.cc.Invoke(ctx, "/plasticcreditledger.plasticcredits.Query/CreditAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsApproved(ctx context.Context, in *QueryIsApprovedRequest, opts ...grpc.CallOption) (*QueryIsApprovedResponse, error) {
	out := new(QueryIsApprovedResponse)
	err := c.cc.Invoke(ctx, "/plasticcreditledger.plasticcredits.Query/IsApproved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Issuer by index.
	Issuer(context.Context, *QueryGetIssuerRequest) (*QueryGetIssuerResponse, error)
	// Queries a list of Issuer items.
	IssuerAll(context.Context, *QueryAllIssuerRequest) (*QueryAllIssuerResponse, error)
	// Queries a ApprovedCollector by index.
	ApprovedCollector(context.Context, *QueryGetApprovedCollectorRequest) (*QueryGetApprovedCollectorResponse, error)
	// Queries a list of ApprovedCollector items.
	ApprovedCollectorAll(context.Context, *QueryAllApprovedCollectorRequest) (*QueryAllApprovedCollectorResponse, error)
	// Queries a Credit by index.
	Credit(context.Context, *QueryGetCreditRequest) (*QueryGetCreditResponse, error)
	// Queries a list of Credit items.
	CreditAll(context.Context, *QueryAllCreditRequest) (*QueryAllCreditResponse, error)
	// Queries a list of IsApproved items.
	IsApproved(context.Context, *QueryIsApprovedRequest) (*QueryIsApprovedResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Issuer(ctx context.Context, req *QueryGetIssuerRequest) (*QueryGetIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Issuer not implemented")
}
func (*UnimplementedQueryServer) IssuerAll(ctx context.Context, req *QueryAllIssuerRequest) (*QueryAllIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssuerAll not implemented")
}
func (*UnimplementedQueryServer) ApprovedCollector(ctx context.Context, req *QueryGetApprovedCollectorRequest) (*QueryGetApprovedCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovedCollector not implemented")
}
func (*UnimplementedQueryServer) ApprovedCollectorAll(ctx context.Context, req *QueryAllApprovedCollectorRequest) (*QueryAllApprovedCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovedCollectorAll not implemented")
}
func (*UnimplementedQueryServer) Credit(ctx context.Context, req *QueryGetCreditRequest) (*QueryGetCreditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Credit not implemented")
}
func (*UnimplementedQueryServer) CreditAll(ctx context.Context, req *QueryAllCreditRequest) (*QueryAllCreditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditAll not implemented")
}
func (*UnimplementedQueryServer) IsApproved(ctx context.Context, req *QueryIsApprovedRequest) (*QueryIsApprovedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsApproved not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plasticcreditledger.plasticcredits.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Issuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Issuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plasticcreditledger.plasticcredits.Query/Issuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Issuer(ctx, req.(*QueryGetIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IssuerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IssuerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plasticcreditledger.plasticcredits.Query/IssuerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IssuerAll(ctx, req.(*QueryAllIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ApprovedCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetApprovedCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApprovedCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plasticcreditledger.plasticcredits.Query/ApprovedCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApprovedCollector(ctx, req.(*QueryGetApprovedCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ApprovedCollectorAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllApprovedCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApprovedCollectorAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plasticcreditledger.plasticcredits.Query/ApprovedCollectorAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApprovedCollectorAll(ctx, req.(*QueryAllApprovedCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Credit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCreditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Credit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plasticcreditledger.plasticcredits.Query/Credit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Credit(ctx, req.(*QueryGetCreditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreditAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCreditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreditAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plasticcreditledger.plasticcredits.Query/CreditAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreditAll(ctx, req.(*QueryAllCreditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsApproved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsApprovedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsApproved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plasticcreditledger.plasticcredits.Query/IsApproved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsApproved(ctx, req.(*QueryIsApprovedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plasticcreditledger.plasticcredits.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Issuer",
			Handler:    _Query_Issuer_Handler,
		},
		{
			MethodName: "IssuerAll",
			Handler:    _Query_IssuerAll_Handler,
		},
		{
			MethodName: "ApprovedCollector",
			Handler:    _Query_ApprovedCollector_Handler,
		},
		{
			MethodName: "ApprovedCollectorAll",
			Handler:    _Query_ApprovedCollectorAll_Handler,
		},
		{
			MethodName: "Credit",
			Handler:    _Query_Credit_Handler,
		},
		{
			MethodName: "CreditAll",
			Handler:    _Query_CreditAll_Handler,
		},
		{
			MethodName: "IsApproved",
			Handler:    _Query_IsApproved_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plasticcredits/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetIssuerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIssuerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIssuerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIssuerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIssuerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIssuerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Issuer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllIssuerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIssuerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIssuerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIssuerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIssuerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIssuerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuer) > 0 {
		for iNdEx := len(m.Issuer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Issuer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovedCollectorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovedCollectorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovedCollectorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovedCollectorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovedCollectorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovedCollectorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ApprovedCollector.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllApprovedCollectorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllApprovedCollectorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllApprovedCollectorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllApprovedCollectorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllApprovedCollectorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllApprovedCollectorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApprovedCollector) > 0 {
		for iNdEx := len(m.ApprovedCollector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApprovedCollector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCreditRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCreditRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCreditRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCreditResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCreditResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCreditResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Credit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCreditRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCreditRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCreditRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCreditResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCreditResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCreditResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Credit) > 0 {
		for iNdEx := len(m.Credit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Credit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsApprovedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsApprovedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsApprovedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsApprovedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsApprovedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsApprovedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Approved) > 0 {
		i -= len(m.Approved)
		copy(dAtA[i:], m.Approved)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Approved)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetIssuerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIssuerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Issuer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllIssuerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIssuerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Issuer) > 0 {
		for _, e := range m.Issuer {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetApprovedCollectorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetApprovedCollectorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApprovedCollector.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllApprovedCollectorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllApprovedCollectorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApprovedCollector) > 0 {
		for _, e := range m.ApprovedCollector {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCreditRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCreditResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Credit.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCreditRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCreditResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Credit) > 0 {
		for _, e := range m.Credit {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsApprovedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsApprovedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Approved)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIssuerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIssuerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIssuerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIssuerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIssuerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIssuerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Issuer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIssuerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIssuerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIssuerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIssuerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIssuerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIssuerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = append(m.Issuer, Issuer{})
			if err := m.Issuer[len(m.Issuer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovedCollectorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovedCollectorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovedCollectorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovedCollectorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovedCollectorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovedCollectorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedCollector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApprovedCollector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllApprovedCollectorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllApprovedCollectorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllApprovedCollectorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllApprovedCollectorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllApprovedCollectorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllApprovedCollectorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedCollector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovedCollector = append(m.ApprovedCollector, ApprovedCollector{})
			if err := m.ApprovedCollector[len(m.ApprovedCollector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCreditRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCreditRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCreditRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCreditResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCreditResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCreditResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Credit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCreditRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCreditRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCreditRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCreditResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCreditResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCreditResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credit = append(m.Credit, Credit{})
			if err := m.Credit[len(m.Credit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsApprovedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsApprovedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsApprovedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsApprovedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsApprovedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsApprovedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approved", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approved = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
